# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'measure_velocity.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

import cv2
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene

from measure_velovity_gui.ui.custom_graphic_view import CustomGraphicsView
from measure_velovity_gui.utils.ui_helper import frame_to_time_progress, image_scale_to_graphic_view
from measure_velovity_gui.velocity_measurer import VelocityMeasure


class Ui_MainWindow(object):
    video_measurer = VelocityMeasure()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1308, 1031)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnClearPoints = QtWidgets.QPushButton(self.centralwidget)
        self.btnClearPoints.setGeometry(QtCore.QRect(1200, 20, 81, 31))
        self.btnClearPoints.setObjectName("btnClearPoints")
        self.slider = QtWidgets.QSlider(self.centralwidget)
        self.slider.setGeometry(QtCore.QRect(40, 920, 341, 16))
        self.slider.setOrientation(QtCore.Qt.Horizontal)
        self.slider.setObjectName("slider")
        self.btnPlay = QtWidgets.QPushButton(self.centralwidget)
        self.btnPlay.setGeometry(QtCore.QRect(230, 950, 61, 31))
        self.btnPlay.setObjectName("btnPlay")
        self.btnStepping = QtWidgets.QPushButton(self.centralwidget)
        self.btnStepping.setGeometry(QtCore.QRect(330, 950, 61, 31))
        self.btnStepping.setObjectName("btnStepping")
        self.btnStepBack = QtWidgets.QPushButton(self.centralwidget)
        self.btnStepBack.setGeometry(QtCore.QRect(130, 950, 61, 31))
        self.btnStepBack.setObjectName("btnStepBack")
        self.btnFastForward = QtWidgets.QPushButton(self.centralwidget)
        self.btnFastForward.setGeometry(QtCore.QRect(420, 950, 61, 31))
        self.btnFastForward.setObjectName("btnFastForward")
        self.btnFastRewind = QtWidgets.QPushButton(self.centralwidget)
        self.btnFastRewind.setGeometry(QtCore.QRect(40, 950, 61, 31))
        self.btnFastRewind.setObjectName("btnFastRewind")
        self.labelProgress = QtWidgets.QLabel(self.centralwidget)
        self.labelProgress.setGeometry(QtCore.QRect(400, 920, 81, 16))
        self.labelProgress.setObjectName("labelProgress")
        self.imgVideo = QtWidgets.QGraphicsView(self.centralwidget)
        self.imgVideo.setGeometry(QtCore.QRect(20, 640, 491, 261))
        self.imgVideo.setObjectName("imgVideo")
        self.imgOri = QtWidgets.QGraphicsView(self.centralwidget)
        self.imgOri.setGeometry(QtCore.QRect(20, 20, 150, 600))
        self.imgOri.setObjectName("imgOri")
        self.imgMask = QtWidgets.QGraphicsView(self.centralwidget)
        self.imgMask.setGeometry(QtCore.QRect(190, 20, 150, 600))
        self.imgMask.setObjectName("imgMask")
        self.imgCal = CustomGraphicsView(self.centralwidget)
        self.imgCal.setGeometry(QtCore.QRect(360, 20, 150, 600))
        self.imgCal.setObjectName("imgCal")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(560, 200, 431, 111))
        self.groupBox.setObjectName("groupBox")
        self.textEdit_5 = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit_5.setGeometry(QtCore.QRect(70, 60, 104, 31))
        self.textEdit_5.setObjectName("textEdit_5")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(240, 30, 54, 12))
        self.label_5.setObjectName("label_5")
        self.textEdit_4 = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit_4.setGeometry(QtCore.QRect(310, 60, 104, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit.setGeometry(QtCore.QRect(70, 20, 104, 31))
        self.textEdit.setObjectName("textEdit")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(10, 30, 54, 12))
        self.label_4.setObjectName("label_4")
        self.textEdit_2 = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit_2.setGeometry(QtCore.QRect(310, 20, 104, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        self.label_9.setGeometry(QtCore.QRect(10, 70, 54, 12))
        self.label_9.setObjectName("label_9")
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(240, 70, 54, 12))
        self.label_8.setObjectName("label_8")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(560, 20, 431, 151))
        self.groupBox_2.setObjectName("groupBox_2")
        self.btnClearSetting_3 = QtWidgets.QPushButton(self.groupBox_2)
        self.btnClearSetting_3.setGeometry(QtCore.QRect(320, 100, 91, 31))
        self.btnClearSetting_3.setObjectName("btnClearSetting_3")
        self.edtSlopeName = QtWidgets.QTextEdit(self.groupBox_2)
        self.edtSlopeName.setGeometry(QtCore.QRect(70, 60, 341, 31))
        self.edtSlopeName.setObjectName("edtSlopeName")
        self.labelTimeScouring = QtWidgets.QLabel(self.groupBox_2)
        self.labelTimeScouring.setGeometry(QtCore.QRect(10, 110, 121, 16))
        self.labelTimeScouring.setObjectName("labelTimeScouring")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(10, 70, 54, 12))
        self.label_6.setObjectName("label_6")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 151, 31))
        self.label_2.setObjectName("label_2")
        self.btnImportVideo = QtWidgets.QPushButton(self.groupBox_2)
        self.btnImportVideo.setGeometry(QtCore.QRect(330, 20, 81, 31))
        self.btnImportVideo.setObjectName("btnImportVideo")
        self.btnAddPoint = QtWidgets.QPushButton(self.centralwidget)
        self.btnAddPoint.setGeometry(QtCore.QRect(1110, 20, 81, 31))
        self.btnAddPoint.setObjectName("btnAddPoint")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(1030, 60, 251, 251))
        self.groupBox_4.setObjectName("groupBox_4")
        self.listWidget = QtWidgets.QListWidget(self.groupBox_4)
        self.listWidget.setGeometry(QtCore.QRect(0, 20, 251, 231))
        self.listWidget.setObjectName("listWidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(560, 360, 721, 611))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(570, 330, 91, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1308, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionImportVideo = QtWidgets.QAction(MainWindow)
        self.actionImportVideo.setObjectName("actionImportVideo")
        self.actionimportVelocity = QtWidgets.QAction(MainWindow)
        self.actionimportVelocity.setObjectName("actionimportVelocity")
        self.actionextract = QtWidgets.QAction(MainWindow)
        self.actionextract.setObjectName("actionextract")
        self.actiona = QtWidgets.QAction(MainWindow)
        self.actiona.setObjectName("actiona")
        self.menu.addAction(self.actionImportVideo)
        self.menu.addAction(self.actionimportVelocity)
        self.menu_2.addAction(self.actionextract)
        self.menu_2.addAction(self.actiona)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())

        self.imgOri.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭水平滚动条
        self.imgOri.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭垂直滚动条

        self.imgMask.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭水平滚动条
        self.imgMask.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭垂直滚动条

        self.imgCal.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭水平滚动条
        self.imgCal.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # 关闭垂直滚动条

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "薄层流流速测量系统"))
        self.btnClearPoints.setText(_translate("MainWindow", "清空测速点"))
        self.btnPlay.setText(_translate("MainWindow", "播放"))
        self.btnStepping.setText(_translate("MainWindow", "步进5帧"))
        self.btnStepBack.setText(_translate("MainWindow", "步退5帧"))
        self.btnFastForward.setText(_translate("MainWindow", "快进3秒"))
        self.btnFastRewind.setText(_translate("MainWindow", "快退3秒"))
        self.labelProgress.setText(_translate("MainWindow", "00：00/00：00"))
        self.groupBox.setTitle(_translate("MainWindow", "边缘检测"))
        self.textEdit_5.setHtml(_translate("MainWindow",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2</p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "hsv下限"))
        self.textEdit_4.setHtml(_translate("MainWindow",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5</p></body></html>"))
        self.textEdit.setHtml(_translate("MainWindow",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">100,50,20</p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "hsv上限"))
        self.textEdit_2.setHtml(_translate("MainWindow",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">150,255,255</p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "腐蚀次数"))
        self.label_8.setText(_translate("MainWindow", "膨胀次数"))
        self.groupBox_2.setTitle(_translate("MainWindow", "基本信息"))
        self.btnClearSetting_3.setText(_translate("MainWindow", "设置当前时间"))
        self.edtSlopeName.setHtml(_translate("MainWindow",
                                             "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                             "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                             "p, li { white-space: pre-wrap; }\n"
                                             "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">null</p></body></html>"))
        self.labelTimeScouring.setText(_translate("MainWindow", "开始放水时刻： 00:00"))
        self.label_6.setText(_translate("MainWindow", "坡面名称"))
        self.label_2.setText(_translate("MainWindow", "当前视频:null"))
        self.btnImportVideo.setText(_translate("MainWindow", "导入视频"))
        self.btnAddPoint.setText(_translate("MainWindow", "添加测速点"))
        self.groupBox_4.setTitle(_translate("MainWindow", "测速点列表"))
        self.label.setText(_translate("MainWindow", "测速记录表"))
        self.menu.setTitle(_translate("MainWindow", "菜单"))
        self.menu_2.setTitle(_translate("MainWindow", "识别"))
        self.actionImportVideo.setText(_translate("MainWindow", "导入视频"))
        self.actionimportVelocity.setText(_translate("MainWindow", "导出流速记录表"))
        self.actionextract.setText(_translate("MainWindow", "设置hsv颜色过滤"))
        self.actiona.setText(_translate("MainWindow", "形态学参数"))

    def fastFoward(self):
        # 快进三秒
        self.video_measurer.forward(3 * self.video_measurer.fps)
        # 更新进度事件显示
        self.update_progress_text()
        # 更新进度条进度
        self.update_slider_value()
        # 更新画面
        self.update_images()

    def rewind(self):
        # 快退三秒
        self.video_measurer.rewind(3 * self.video_measurer.fps)
        # 更新进度事件显示
        self.update_progress_text()
        # 更新进度条进度
        self.update_slider_value()
        # 更新画面
        self.update_images()

    def stepping(self):
        # 步进5帧
        self.video_measurer.forward(5)
        # 更新进度事件显示
        self.update_progress_text()
        # 更新进度条进度
        self.update_slider_value()
        # 更新画面
        self.update_images()

    def stepBack(self):
        # 步退5帧
        self.video_measurer.rewind(5)
        # 更新进度事件显示
        self.update_progress_text()
        # 更新进度条进度
        self.update_slider_value()
        # 更新画面
        self.update_images()

    def bindListener(self, MainWindow):
        # self.btnPlay.clicked.connect(self.play_click)
        self.btnImportVideo.clicked.connect(self.import_file)
        # 设置当前为起始冲刷时间
        self.btnClearSetting_3.clicked.connect(self.set_init_scouring)

        self.slider.valueChanged.connect(self.slider_listener)  # 设置值改变时的槽函数
        # 快进按钮
        self.btnFastForward.clicked.connect(self.fastFoward)
        # 快退按钮
        self.btnFastRewind.clicked.connect(self.rewind)
        # 步进按钮
        self.btnStepping.clicked.connect(self.stepping)
        # 步退按钮
        self.btnStepBack.clicked.connect(self.stepBack)

        # 添加测速点按钮
        self.btnAddPoint.clicked.connect(self.add_current_measure_point)
        # 清除测速点按钮
        self.btnClearPoints.clicked.connect(self.clear_measure_points)

    def play_click(self):
        print('click!!!')

    def set_init_scouring(self):
        self.video_measurer.set_current_frame_as_init_scouring()
        frame_index = self.video_measurer.cur_frame_index
        initial_time = frame_to_time_progress(frame_index, self.video_measurer.fps)
        self.labelTimeScouring.setText("开始放水时刻：" + str(initial_time))

    def slider_listener(self):
        progress = self.slider.value()

        total_frames = self.video_measurer.get_total_frames()
        frame_to_skip = int(total_frames * progress / 100)
        # print("skip to frame: " + str(frame_to_skip))  # 打印当前值

        self.video_measurer.skip_to_frame(frame_to_skip)

        # 更新当前播放进度
        self.update_progress_text()

        # 更新视频画面
        self.update_images()

    def update_slider_value(self):
        cur_frame_index = self.video_measurer.cur_frame_index
        total_frames = self.video_measurer.get_total_frames()

        progress = int(cur_frame_index * 100 / total_frames)
        self.slider.setValue(progress)

    def update_progress_text(self):
        cur_frame = self.video_measurer.cur_frame_index
        total_frames = self.video_measurer.get_total_frames()

        time_progress = frame_to_time_progress(cur_frame, self.video_measurer.fps)
        total_time = frame_to_time_progress(total_frames, self.video_measurer.fps)

        str_progress = "{0}/{1}".format(time_progress, total_time)
        self.labelProgress.setText(str_progress)

    def update_images(self):
        # 显示原始rgb图像
        image = self.video_measurer.get_rgb_image()
        image_scale_to_graphic_view(image, self.imgOri)

        # 显示带轮廓的图片
        image_with_contours = self.video_measurer.get_image_with_contours()
        image_with_contours = cv2.cvtColor(image_with_contours, cv2.COLOR_BGR2RGB)
        image_scale_to_graphic_view(image_with_contours, self.imgMask)

        # 更新测量界面的图像
        self.update_measure_image()

    def update_measure_image(self):
        image_with_measure_points = self.video_measurer.get_image_with_measure_points()
        image_scale_to_graphic_view(image_with_measure_points, self.imgCal)

    def import_file(self):
        default_path = r"E:\Moyear\文档\冲刷实验\测试数据"

        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, ok = QFileDialog.getOpenFileName(self.centralwidget, "File", default_path,
                                                   "All Files (*);;Video Files (*.mp4)", options=options)

        print('选择的文件：', file_name)

        if file_name is None or file_name == "":
            return

        # 更新文件名
        self.label_2.setText(os.path.basename(file_name))

        self.video_measurer.init_with_video(file_name)
        self.video_measurer.read()

        # 更新视频画面
        self.update_images()

        # 设置播放进度
        self.update_progress_text()

    def add_current_measure_point(self):
        selected_point = self.imgCal.get_selected_point()

        if selected_point is None:
            print("请先选择测速点再添加")
            return

        # print("测速点x：", selected_point[0], "y: ", selected_point[1])

        x = selected_point[0]
        y = selected_point[1]

        frame_width = self.video_measurer.frame_width
        frame_height = self.video_measurer.frame_height

        view_width = self.imgCal.width()
        view_height = self.imgCal.height()

        # 由graphic view坐标位置到的真实图像坐标位置的转换
        real_x = int(x * frame_width / view_width)
        real_y = int(y * frame_height / view_height)

        frame_index = self.video_measurer.cur_frame_index
        self.video_measurer.add_measure_point(real_x, real_y, frame_index)

        # 清空选中的点
        self.imgCal.clear_selected_point()

        # 插入到测速点列表
        frame_index = self.video_measurer.cur_frame_index
        point_time = frame_to_time_progress(frame_index, self.video_measurer.fps)

        item_label = "[{0}] ({1},{2})".format(point_time, real_x, real_y)
        self.listWidget.addItem(item_label)

        # 更新测量界面的画面
        self.update_measure_image()

    def clear_measure_points(self):
        self.video_measurer.clear_measure_points()
        # 更新测量界面的画面
        self.update_measure_image()
        # 清空测速点列表
        self.listWidget.clear()

